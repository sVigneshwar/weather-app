{"version":3,"sources":["images/bg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","toCelcius","setState","type","toFahrenheit","fetchData","bind","handleChange","state","city","data","e","preventDefault","this","Promise","all","fetch","headers","Authorization","then","res1","res2","json","data1","data2","cod","alert","console","log","target","value","className","src","total_results","photos","landscape","bg","alt","onSubmit","onChange","placeholder","id","name","defaultChecked","sys","country","weather","icon","main","temp","description","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8f6f9019.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bg.2909719e.jpg\";","import React from \"react\";\nimport bg from \"./images/bg.jpg\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.fetchData = this.fetchData.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {\n      city: \"\",\n      type: \"C\",\n      data: null\n    };\n  }\n\n  async fetchData(e) {\n    e.preventDefault();\n    this.state.city !== \"\"\n      ? Promise.all([\n          fetch(\n            `https://api.openweathermap.org/data/2.5/weather?q=${\n              this.state.city\n            }&${\n              this.state.type === \"C\" ? `units=metric` : `units=imperial`\n            }&APPID=0af7e43f6aedd8b6d6fad752c6d4a46d`\n          ),\n          fetch(\n            `https://api.pexels.com/v1/search?query=${this.state.city}+query&per_page=1&page=1`,\n            {\n              headers: {\n                Authorization:\n                  \"563492ad6f9170000100000147bed84a87224a1a9568a9c51a8eb780\"\n              }\n            }\n          )\n        ])\n          .then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\n          .then(([data1, data2]) => {\n            data1.cod === 200\n              ? this.setState({\n                  data: [data1, data2],\n                  city: \"\"\n                })\n              : alert(\"City not Found\");\n\n            console.log(this.state.data);\n          })\n      : alert(\"Enter a city name\");\n    this.setState({\n      city: \"\"\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      city: e.target.value\n    });\n  }\n  toCelcius = () => {\n    this.setState({\n      type: \"C\"\n    });\n  };\n  toFahrenheit = () => {\n    this.setState({\n      type: \"F\"\n    });\n  };\n  render() {\n    const data = this.state.data;\n    return (\n      <div className=\"weather\">\n        {this.state.data !== null ? (\n          <img\n            src={\n              data[1].total_results > 0 ? data[1].photos[0].src.landscape : bg\n            }\n            alt={this.state.city}\n            className=\"city-image\"\n          />\n        ) : null}\n        <div className=\"container\">\n          <form className=\"searchBar\" onSubmit={this.fetchData}>\n            <div className=\"mdl-textfield mdl-js-textfield\">\n              <input\n                className=\"mdl-textfield__input\"\n                type=\"text\"\n                value={this.state.city}\n                onChange={this.handleChange}\n                placeholder={this.state.city === \"\" ? \"Enter City\" : \"\"}\n              />\n              <label className=\"mdl-textfield__label\">Enter City</label>\n            </div>\n\n            <label className=\"mdl-radio mdl-js-radio mdl-js-ripple-effect\">\n              <input\n                type=\"radio\"\n                id=\"option-1\"\n                className=\"mdl-radio__button\"\n                name=\"options\"\n                value=\"1\"\n                defaultChecked\n                onChange={this.state.city !== \"\" ? this.toCelcius : null}\n              />\n              <span className=\"mdl-radio__label\">Celcius</span>\n            </label>\n            <label className=\"mdl-radio mdl-js-radio mdl-js-ripple-effect\">\n              <input\n                type=\"radio\"\n                id=\"option-2\"\n                className=\"mdl-radio__button\"\n                name=\"options\"\n                value=\"2\"\n                onChange={this.state.city !== \"\" ? this.toFahrenheit : null}\n              />\n              <span className=\"mdl-radio__label\">Fahrenheit</span>\n            </label>\n\n            <button className=\"mdl-button mdl-js-button mdl-button--raised mdl-js-ripple-effect\">\n              <i className=\"material-icons\">search</i>\n            </button>\n          </form>\n          {this.state.data !== null ? (\n            <div className=\"weatherDetails\">\n              <h3>\n                {data[0].name}, {data[0].sys.country}\n              </h3>\n              <h5>Temperature</h5>\n              <img\n                src={`http://openweathermap.org/img/wn/${data[0].weather[0].icon}@2x.png`}\n                alt={`http://openweathermap.org/img/wn/${data[0].weather[0].icon}@2x.png`}\n              />\n              <h5>\n                {this.state.type === \"C\"\n                  ? `${data[0].main.temp}°C`\n                  : `${data[0].main.temp}°F`}\n                , {data[0].weather[0].description}\n              </h5>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/custom.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}